To create an attractive timetable manager with the specified requirements using Java Swing and MySQL JDBC, you need to follow these steps:

1. **Design the Database Schema**: Create a MySQL database to store information about periods, teachers, branches, subjects, and labs. 

2. **Develop the Swing GUI**: Create a user interface using Java Swing to display and manage the timetable.

3. **Implement CRUD Functionality**: Write Java code to connect to the MySQL database and perform Create, Read, Update, and Delete (CRUD) operations.

4. **Link Swing with JDBC**: Integrate your Swing application with MySQL using JDBC to fetch and update data in real-time.

Here's a simplified version of how you might implement this:

### 1. Database Schema

Create the following tables in MySQL:

```sql
CREATE DATABASE timetable_manager;

USE timetable_manager;

CREATE TABLE teachers (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL
);

CREATE TABLE branches (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL
);

CREATE TABLE subjects (
    id INT AUTO_INCREMENT PRIMARY KEY,
    branch_id INT,
    name VARCHAR(100) NOT NULL,
    type ENUM('Theory', 'Lab') NOT NULL,
    FOREIGN KEY (branch_id) REFERENCES branches(id)
);

CREATE TABLE periods (
    id INT AUTO_INCREMENT PRIMARY KEY,
    period_no INT NOT NULL,
    day ENUM('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday') NOT NULL,
    branch_id INT,
    subject_id INT,
    teacher_id INT,
    FOREIGN KEY (branch_id) REFERENCES branches(id),
    FOREIGN KEY (subject_id) REFERENCES subjects(id),
    FOREIGN KEY (teacher_id) REFERENCES teachers(id)
);
```

### 2. Java Swing GUI

Here's a basic example of a Java Swing application:

```java
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.*;

public class TimetableManager extends JFrame {

    private Connection connection;

    private JTextField periodField;
    private JTextField dayField;
    private JComboBox<String> branchComboBox;
    private JComboBox<String> subjectComboBox;
    private JComboBox<String> teacherComboBox;
    private JButton addButton;
    private JButton updateButton;
    private JButton deleteButton;
    private JTable timetableTable;

    public TimetableManager() {
        setTitle("Timetable Manager");
        setSize(800, 600);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        JPanel inputPanel = new JPanel();
        inputPanel.setLayout(new GridLayout(6, 2));

        inputPanel.add(new JLabel("Period No:"));
        periodField = new JTextField();
        inputPanel.add(periodField);

        inputPanel.add(new JLabel("Day:"));
        dayField = new JTextField();
        inputPanel.add(dayField);

        inputPanel.add(new JLabel("Branch:"));
        branchComboBox = new JComboBox<>();
        inputPanel.add(branchComboBox);

        inputPanel.add(new JLabel("Subject:"));
        subjectComboBox = new JComboBox<>();
        inputPanel.add(subjectComboBox);

        inputPanel.add(new JLabel("Teacher:"));
        teacherComboBox = new JComboBox<>();
        inputPanel.add(teacherComboBox);

        addButton = new JButton("Add");
        updateButton = new JButton("Update");
        deleteButton = new JButton("Delete");

        JPanel buttonPanel = new JPanel();
        buttonPanel.add(addButton);
        buttonPanel.add(updateButton);
        buttonPanel.add(deleteButton);

        add(inputPanel, BorderLayout.NORTH);
        add(buttonPanel, BorderLayout.SOUTH);

        timetableTable = new JTable(); // You need to set a table model here
        add(new JScrollPane(timetableTable), BorderLayout.CENTER);

        // Connect to the database
        connectToDatabase();

        // Populate combo boxes
        populateComboBoxes();

        // Add action listeners
        addButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                addEntry();
            }
        });

        updateButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                updateEntry();
            }
        });

        deleteButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                deleteEntry();
            }
        });
    }

    private void connectToDatabase() {
        try {
            connection = DriverManager.getConnection("jdbc:mysql://localhost/timetable_manager", "username", "password");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void populateComboBoxes() {
        try {
            // Populate branches
            Statement stmt = connection.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT * FROM branches");
            while (rs.next()) {
                branchComboBox.addItem(rs.getString("name"));
            }

            // Populate subjects
            rs = stmt.executeQuery("SELECT * FROM subjects");
            while (rs.next()) {
                subjectComboBox.addItem(rs.getString("name"));
            }

            // Populate teachers
            rs = stmt.executeQuery("SELECT * FROM teachers");
            while (rs.next()) {
                teacherComboBox.addItem(rs.getString("name"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void addEntry() {
        // Implement adding logic
    }

    private void updateEntry() {
        // Implement updating logic
    }

    private void deleteEntry() {
        // Implement deleting logic
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                new TimetableManager().setVisible(true);
            }
        });
    }
}
```

### 3. CRUD Operations

Here’s a brief overview of how you can implement CRUD operations:

- **Add Entry**: Insert a new record into the `periods` table.
- **Update Entry**: Update an existing record in the `periods` table based on some identifier.
- **Delete Entry**: Delete a record from the `periods` table based on some identifier.

For each operation, you would write the appropriate SQL query and execute it using `PreparedStatement` to protect against SQL injection.

### 4. Full Integration

Make sure to:

- **Handle Exceptions**: Implement error handling for database operations.
- **Update the JTable**: Update the `JTable` after performing CRUD operations to reflect the changes in the UI.
- **Validation**: Add input validation to ensure correct data entry.

This example provides a basic structure. For a complete solution, you’ll need to expand each part with detailed implementations and handle more complex scenarios based on your application needs.